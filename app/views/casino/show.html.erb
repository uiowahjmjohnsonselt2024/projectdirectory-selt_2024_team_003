<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Casino - Color Spin Game</title>
  <style>
      body {
          font-family: Arial, sans-serif;
          background-image: url('/assets/casino.jpg');
          background-size: cover;
          background-position: center;
          margin: 0;
          padding: 0;
          color: #fff;
          display: flex;
          flex-direction: column;
          height: 100vh;
      }

      nav {
          background-color: rgba(0, 0, 0, 0.7);
          padding: 15px;
          display: flex;
          justify-content: space-between;
          align-items: center;
          width: 100%;  /* Ensures navbar spans the entire width */
      }

      nav span, nav a {
          color: white;
          text-decoration: none;
          font-size: 18px;
      }

      .nav-left {
          display: flex;
          align-items: center;
      }

      .nav-right {
          display: flex;
          gap: 10px;
      }

      .button {
          padding: 10px 20px;
          font-size: 18px;
          border-radius: 5px;
          text-decoration: none;
          color: white;
      }

      .button.blue {
          background-color: blue;
      }

      .button.red {
          background-color: red;
      }

      .carousel-container {
          position: relative;
          width: 80%;
          height: auto;
          min-height: 100px;
          display: flex;
          align-items: stretch;
          margin: auto;
          overflow: hidden;
          border: 2px solid #000;
          border-radius: 10px;
          justify-content: center;
      }

      .carousel {
          display: flex;
          align-items: stretch;
          position: absolute;
          top: 0;
          left: 0;
          height: 100%;
      }

      .tile {
          width: 100px;
          height: 100px;
          display: flex;
          justify-content: center;
          align-items: center;
          font-size: 20px;
          color: white;
          border-radius: 5px;
          margin-right: 5px;
      }

      .tile.red {
          background-color: red;
      }

      .tile.black {
          background-color: black;
      }

      .tile.green {
          background-color: green;
      }

      .line {
          position: absolute;
          top: 0;
          bottom: 0;
          left: 50%;
          transform: translateX(-50%);
          width: 5px;
          background-color: blue;
      }

      .bet-section {
          background-color: rgba(0, 0, 0, 0.7);
          padding: 20px;
          border-radius: 10px;
          text-align: center;
          margin: auto;
      }

      .bet-buttons {
          display: flex;
          justify-content: center;
          margin-bottom: 15px;
      }

      .bet-button {
          padding: 10px 20px;
          margin: 0 10px;
          font-size: 18px;
          cursor: pointer;
          border-radius: 5px;
          color: white;
          border: none;
      }

      .bet-button.red { background-color: red; }
      .bet-button.black { background-color: black; }
      .bet-button.green { background-color: green; }

      .bet-button.dim { opacity: 0.5; }

      input[type="number"] {
          padding: 10px;
          margin: 10px 0;
          font-size: 18px;
          width: 150px;
          text-align: center;
          background-color: #444;
          color: white;
          border: 1px solid #555;
          border-radius: 5px;
      }

      button {
          padding: 10px 20px;
          background-color: red;
          color: white;
          font-size: 18px;
          border: none;
          border-radius: 5px;
          cursor: pointer;
      }

      #result {
          margin-top: 20px;
          font-size: 18px;
          font-weight: bold;
      }

      .message-success { color: green; }
      .message-error { color: red; }
  </style>
</head>
<body>
<nav>
  <div class="nav-left">
    <span id="shards_display">Your Shards: <%= @user_shards %></span>
  </div>
  <div class="nav-right">
    <a href="/store" class="button blue">Store</a>
    <a href="/grid" class="button red">Back to Grid</a>
  </div>
</nav>

<div class="carousel-container">
  <div class="carousel"></div>
  <div class="line"></div>
</div>

<div class="bet-section">
  <div class="bet-buttons">
    <button class="bet-button red">Red</button>
    <button class="bet-button black">Black</button>
    <button class="bet-button green">Green</button>
  </div>
  <input type="number" id="bet_amount" placeholder="Enter your bet">
  <button id="spin_button">Spin</button>
  <div id="result"></div>
</div>

<script>
    const highRoller = <%= @current_user.has_achievement('High Roller: The casino calls to you') %>

    document.addEventListener("DOMContentLoaded", () => {
        const colors = ["red", "black"]; // Only red and black by default
        const carousel = document.querySelector(".carousel");
        const line = document.querySelector(".line");
        const spinButton = document.getElementById("spin_button");
        const resultDiv = document.getElementById("result");
        const betButtons = document.querySelectorAll(".bet-button");
        const betAmountInput = document.getElementById("bet_amount");

        let spinning = false;
        let userBet = null;
        let betAmount = 0;

        let tileCounter = 0; // Track the number of red/black tiles added

        // Generate initial tiles
        for (let i = 0; i < 100; i++) {
            addTile(getNextTileColor());
        }

        function getNextTileColor() {
            tileCounter++;
            // Add green tile every 15 tiles
            if (tileCounter % 15 === 0) {
                return "green";
            }
            // Randomly alternate between red and black
            return colors[Math.floor(Math.random() * colors.length)];
        }

        function addTile(color) {
            const tile = document.createElement("div");
            tile.classList.add("tile", color);
            tile.textContent = color.charAt(0).toUpperCase() + color.slice(1);
            carousel.appendChild(tile);
        }

        function startSpin() {
            if (spinning) return;
            spinning = true;
            resultDiv.textContent = "Spinning...";
            resultDiv.className = "";

            let speed = 0;
            let acceleration = 3;
            let maxSpeed = 500;
            let decelerationStart = 3000; // ms
            let totalDuration = 6000; // ms
            let elapsed = 0;

            const interval = setInterval(() => {
                elapsed += 20;

                if (elapsed < decelerationStart) {
                    speed = Math.min(speed + acceleration, maxSpeed);
                } else {
                    speed = Math.max(speed - acceleration, 0);
                }

                // Move tiles left
                const tiles = carousel.children;
                for (let tile of tiles) {
                    tile.style.transform = `translateX(-${speed}px)`;
                }

                // Add new tiles to the right if needed
                const lastTile = tiles[tiles.length - 1];
                if (lastTile.getBoundingClientRect().right < window.innerWidth) {
                    addTile(getNextTileColor());
                }

                // Remove tiles that exit the left
                const firstTile = tiles[0];
                if (firstTile.getBoundingClientRect().right < 0) {
                    carousel.removeChild(firstTile);
                }

                // Stop spinning after total duration
                if (elapsed >= totalDuration) {
                    clearInterval(interval);
                    stopSpin();
                    if (betAmount >= 250 && !highRoller) confirm("HIGH ROLLER ACHIEVEMENT UNLOCKED");
                }
            }, 20);
        }

        function stopSpin() {
            spinning = false;

            // Determine the winning color
            const tiles = Array.from(carousel.children);
            const winningTile = tiles.find(tile => {
                const tileRect = tile.getBoundingClientRect();
                const lineRect = line.getBoundingClientRect();
                return tileRect.left < lineRect.left && tileRect.right > lineRect.right;
            });

            const winningColor = winningTile.classList[1];
            displayResult(winningColor);
            // Send the result to the backend to update the user's shards
            updateShards(winningColor);
        }

        function displayResult(winningColor) {
            let winnings = 0;
            let payoutMultiplier = 2; // Default payout multiplier for red/black

            if (winningColor === "green") {
                payoutMultiplier = 14; // Higher multiplier for green
            }

            if (userBet === winningColor) {
                winnings = betAmount * payoutMultiplier;
                resultDiv.textContent = `You won! The spin landed on ${winningColor}. You gain ${winnings} shards.`;
                resultDiv.className = "message-success";
            } else {
                resultDiv.textContent = `You lost! The spin landed on ${winningColor}. You lose ${betAmount} shards.`;
                resultDiv.className = "message-error";
            }
        }

        function updateShards(winner) {
            fetch("/casino/place_bet", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({
                    bet_amount: betAmount,
                    user_bet: userBet,
                    winner: winner // Winner is known at this point
                })
            })
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      resultDiv.textContent += ` Your new shard balance is ${data.shards}.`;
                      document.getElementById("shards_display").textContent = `Your Shards: ${data.shards}`;
                  } else {
                      alert(data.message);
                  }
              })
              .catch(error => {
                  console.error("Error:", error);
              });
        }

        betButtons.forEach(button => {
            button.addEventListener("click", () => {
                userBet = button.classList[1];
                betButtons.forEach(btn => btn.classList.add("dim"));
                button.classList.remove("dim");
            });
        });

        spinButton.addEventListener("click", () => {
            betAmount = parseInt(betAmountInput.value) || 0;

            if (!userBet) {
                alert("Please select a color (Red, Black, or Green) before spinning.");
                return; // Stop further execution if no color is selected
            }

            if (betAmount > 0) {
                const currentShardsDisplay = document.getElementById("shards_display");
                const currentShards = parseInt(currentShardsDisplay.textContent.match(/\d+/)[0]);

                if (currentShards >= betAmount) {
                    // Temporarily update the shards display immediately
                    currentShardsDisplay.textContent = `Your Shards: ${currentShards - betAmount}`;

                    // Send the bet info to the backend before spinning
                    fetch("/casino/place_bet", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
                        },
                        body: JSON.stringify({
                            bet_amount: betAmount,
                            user_bet: userBet,
                            winner: "pending" // Initially, winner is unknown
                        })
                    })
                      .then(response => response.json())
                      .then(data => {
                          if (data.success) {
                              startSpin(); // Start spinning only after successful bet placement
                          } else {
                              // Revert shards display on failure
                              currentShardsDisplay.textContent = `Your Shards: ${currentShards}`;
                              alert(data.message);
                          }
                      })
                      .catch(error => {
                          // Revert shards display in case of error
                          currentShardsDisplay.textContent = `Your Shards: ${currentShards}`;
                          console.error("Error:", error);
                      });
                } else {
                    alert("You don't have enough shards to place this bet.");
                }
            } else {
                alert("Please enter a valid bet amount.");
            }
        });
    });
</script>
</body>
</html>
